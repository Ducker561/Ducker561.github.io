<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome To Our Home!</title>
  
  
  <link href="https://blog.guipink.fun/atom.xml" rel="self"/>
  
  <link href="https://blog.guipink.fun/"/>
  <updated>2023-05-24T04:20:39.728Z</updated>
  <id>https://blog.guipink.fun/</id>
  
  <author>
    <name>IceFlower</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>双指针算法</title>
    <link href="https://blog.guipink.fun/2023/05/24/doublePoints/"/>
    <id>https://blog.guipink.fun/2023/05/24/doublePoints/</id>
    <published>2023-05-24T03:52:12.000Z</published>
    <updated>2023-05-24T04:20:39.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="双指针算法"><a class="header-anchor" href="#双指针算法">¶</a>双指针算法</h2><p>当遇到和数组相关的问题时，可以考虑双指针算法。</p><p>双指针算法是指：在数组中使用两个指针来遍历数组，得到想要的结果，其时间复杂度往往比单个指针遍历更低。</p><p>双指针算法包括两类：<strong>对撞指针</strong>和<strong>快慢指针</strong></p><h3 id="对撞指针"><a class="header-anchor" href="#对撞指针">¶</a>对撞指针</h3><p>当看到题目中明确说是<strong>有序数组</strong>时，可以考虑使用对撞指针法。</p><p>对撞指针是指：有两个指针left和right，left从数组开头开始遍历，right从数组结尾开始遍历，当中间两者相遇时往往是结束条件。</p><p>以leetcode<a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">第977题</a>为例：</p><p>题目中描述的数组是有序数组，那么考虑left和right两个指针。</p><p>由于平方幂函数是两头大中间小，所以left和right指向的数平方后应当比较最大值，这样就做到了结果数组的有序性。</p><p>每轮循环移动left<strong>或</strong>right指针，选取左或右指针所指向的值平方后的两者之间最大值放入结果数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">res</span><span class="params">(nums.size())</span></span>;<span class="comment">//存放结果的数组</span></span><br><span class="line">        <span class="keyword">int</span> rightres = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(rightres&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((nums[left]*nums[left])&gt;=(nums[right]*nums[right]))&#123;</span><br><span class="line">                res[rightres] = nums[left]*nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res[rightres] = nums[right]*nums[right];</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            rightres--;<span class="comment">//结果数组指针从右往左递减</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于只遍历了一次数组，所以时间复杂度仅为O(n)</p><h3 id="快慢指针"><a class="header-anchor" href="#快慢指针">¶</a>快慢指针</h3><p>也称为<strong>滑动窗口</strong>。表现为两个指针都是从同一侧起步，按不同策略前进，一个在前一个在后。</p><p>这种方法在用于<strong>区间搜索问题</strong>时很有用，由于排除了一些重复考虑的内容，所以比暴力解法快。</p><p>以leetcode<a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">第209题</a>为例：</p><p>该题的描述中提到搜索子数组，适合使用滑动窗口方法。</p><p>在该题的背景下，fast指针用于遍历数组，即表示子数组区间的右端。slow指针表示子数组区间的左端。</p><p>那么如何移动两个指针呢？会不会出现漏解的情况呢？</p><p>由于该题目要求的是和大于target且长度最短的子数组，那么一旦出现区间子数组中的和大于target时，就停止fast指针。此时，slow~fast的区间子数组中<strong>可能出现多个满足条件的区间子数组</strong>，所以开始移动slow指针依次缩小范围检查。</p><p>在slow指针依次检查下，当区间子数组的和小于target时，<strong>不可能再有满足条件的区间子数组</strong>，那么此时停止移动slow指针，开启fast指针。</p><p>这样，不仅得到了结果，还就<strong>避免了一些无意义的检查</strong>，比暴力搜索快。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span>(right&lt;nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">                <span class="keyword">if</span>(res!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(res&gt;right - left + <span class="number">1</span>)&#123;</span><br><span class="line">                        res = right - left + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    res = right - left + <span class="number">1</span>;</span><br><span class="line">                &#125;  </span><br><span class="line">                sum -= nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                right++;</span><br><span class="line">                <span class="keyword">if</span>(right&lt;nums.<span class="built_in">size</span>())</span><br><span class="line">                    sum += nums[right];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于左右指针依次遍历了所有数，该算法的时间复杂度应为O(2n)==O(n)</p><h3 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h3><p>针对数组类型的题目，双指针算法是一种很好的解题思路。当数组为有序时，可以考虑<strong>对撞指针</strong>，当涉及子数组搜索时，可以考虑<strong>滑动窗口</strong>。</p><p>他们的共同点都在于减少了遍历的次数以及省略了一些不必要的遍历。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;双指针算法&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#双指针算法&quot;&gt;¶&lt;/a&gt;双指针算法&lt;/h2&gt;
&lt;p&gt;当遇到和数组相关的问题时，可以考虑双指针算法。&lt;/p&gt;
&lt;p&gt;双指针算法是指：在数组中使用两个指针来遍历数组，得到想要的结果，其时间复</summary>
      
    
    
    
    <category term="算法学习" scheme="https://blog.guipink.fun/categories/algorithmStudy/"/>
    
    
  </entry>
  
  <entry>
    <title>网安数之群论总结</title>
    <link href="https://blog.guipink.fun/2022/01/18/groupTheorySummary/"/>
    <id>https://blog.guipink.fun/2022/01/18/groupTheorySummary/</id>
    <published>2022-01-18T13:17:20.000Z</published>
    <updated>2022-01-18T13:46:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="群论定义"><a class="header-anchor" href="#群论定义">¶</a>群论定义</h2><p><strong>映射</strong> 设A，B 是两个非空的集合，A到B 的一个映射指的是一个对应法则：对集合A中的每一个元素 x，有集合B中唯一确定的元素 y 与它对应。</p><p><strong>封闭性</strong> 若是一个A×A到A的代数运算，则称集合A对于运算o是封闭的，或称o是A的代数运算或二元运算。</p><p><strong>结合律</strong> 称集合A的代数运算o适合结合律，如对A的任何三个元a，b，c，都有(a o b) o c = a o (b o c), (a,b,c可以是相同的元)。</p><p><strong>群</strong> 一个有代数运算 * 的非空集合G，如满足：</p><p>(i) 该代数运算满足结合律；</p><p>(ii) G中存在单位元e：ae = ea = a，对任意a∈G</p><p>(iii) G中的每个元素a都有逆元a<sup>-1</sup> , aa<sup>-1</sup>= a<sup>-1</sup>a=e</p><p>则称G在*下构成群,记为&lt;G, * &gt;或G.</p><p>（封闭性、结合律、单位元、逆元）</p><p><strong>交换律</strong> 一个A×A到D的一个代数运算o适合交换律，加入对于A的任何两个元a，b来说都有a o b=b o a。</p><p><strong>子群</strong> 群G的非空子集H对于G的乘法来说作成一个群，那么H叫做G的子群，用H≤G表示。</p><p><strong>元素的阶</strong> 群G的一个元素a，使得am=e的最小正整数m叫做a的阶。若m不存在，称a为无限阶。记作|a|。</p><p><strong>循环群</strong> 若G=&lt;a&gt;，则称G为由a生成的一个循环群，并称a为G的一个生成元。</p><p><strong>变换</strong> 集合X到自身的映射，叫做集合X的一个变换。（单射变换、满射变换、双射变换、恒等变换）</p><p><strong>置换(对称)群</strong> 非空结合M的所有双射变换关于映射的复合运算构成群，称为M上的对称群。当|M|=n时，称为n次对称群，用S<sub>n</sub>来表示。S<sub>n</sub>的任意子群叫置换群。</p><p><strong>置换</strong> Sn中把a<sub>i1</sub>变到a<sub>i2</sub>,a<sub>i2</sub>变到a<sub>i3</sub>,…,a<sub>ik</sub>变到a<sub>i1</sub>，其它元素不变的置换叫做一个k循环置换(k-轮换)。用(i<sub>1</sub>i<sub>2</sub>…i<sub>k</sub>),(i<sub>2</sub>i<sub>3</sub>……i<sub>k</sub>i<sub>1</sub>)…或(i<sub>k</sub>i<sub>1</sub>…i<sub>k-1</sub>)表示。</p><p>2-循环置换称为对换。</p><p>恒等置换叫做1-循环，记作(1)=(2)=…(n)</p><p><strong>对称变换群</strong> 使图形变到与自身重合的变化，称为该图形的对称变换。一个图形的所有对称变换关于变换的合成构成群，称为该图形的对称变换群。</p><p><strong>陪集</strong> H是G的子群，a∈G，则称群G的子集aH={ax|x∈H}为群G关于子群H的左陪集，而子集Ha={xa|x∈H}为右陪集。</p><p><strong>陪集分解</strong> 用aH,bH,cH,…表示子群H在G中的所有不同的左陪集，则有 G=aH∪bH∪cH∪… 称其为群G关于子群H的左陪集分解，称{a,b,c,…}为G关于H的一个左陪集代表系。</p><p><strong>指数</strong> 群G的子群H的互异左(右)陪集的个数叫做H在G里的指数，记为[G:H]。</p><p><strong>正规子群</strong> 设H≤G，任意a∈G，若aH=Ha，则称H为G的正规子群（不变子群），记作H ⊴ G。</p><p><strong>中心</strong> 群G的所有与G的任意元可交换的元构成G的一个正规子群。这是G的一个重要的正规子群，叫做G的中心，记作C(G)，C(G)={x|x∈G, xa=ax, ∀a∈G}。</p><p><strong>商群</strong> 设H ⊴ G，令集合G/H={aH|a∈G}，并定义运算：</p><p>(aH)·(bH)=abH, 则G/H在该运算下构成一个群，成为G关于H的商群。</p><p><strong>群同态与同构</strong> 设G和G’是两个群，f是G(o运算)到G’(o’运算)的一个映射，如果对任意的a，b∈G，都有f(a o b)=f(a) o’ f(b),那么f叫做G到G’的一个同态。</p><p>若f是一一映射，则称G与G’同构，记作G≌G’.</p><p>若G=G’，同态f称为自同态，同构f称为自同构。</p><p><strong>同态核</strong> 设f是群G到群G’的同态映射，令K={a|a∈G，f(a)=e’}则称K是同态f的核，记作Ker(f)。</p><h2 id="群论定理"><a class="header-anchor" href="#群论定理">¶</a>群论定理</h2><p><strong>群的基本性质：</strong></p><p>1 群G的单位元是唯一的</p><p>2 群G的任意元素的逆元是唯一的</p><p><strong>交换律</strong> 假如集合的一个代数运算同时适合结合律与交换律，那么在a<sub>1</sub> o a<sub>2</sub> o…o a<sub>n</sub>中，元的次序可以任意调换。</p><p><strong>平凡子群</strong> 一个非空群至少包含两个子群：G和{e}</p><p><strong>子群基本性质：</strong></p><p>设G是群，H≤G，则子群H的单位元是群G的单位元，H中的元素a在H中的逆元就是a在G中的逆元。</p><p><strong>定理1</strong> 群G的一个非空子集H作成G的一个子群的充要条件：<br>1 a，b∈H ⇒ ab∈H</p><p>2 a∈H ⇒ a<sup>-1</sup>∈H</p><p>即可以直接等价于：a，b∈H ⇒ ab<sup>-1</sup>∈H (a<sup>-1</sup>b∈H)</p><p><strong>定理2</strong> 群G的一个非空有限子集H作成G的一个子群的充要条件是：a，b∈H ⇒ ab∈H</p><p><strong>定理3</strong> 设G是一个群，{H<sub>i</sub>}i∈I是G的一族子群，则∩<sub>i∈I</sub> H<sub>i</sub>=H<sub>1</sub>∩H<sub>2</sub>∩…∩H<sub>n</sub>∩…是G的一个子群。</p><p>提醒：∪不满足</p><p><strong>关于元素的阶的注意事项：</strong></p><p>1 当G为加群时，其运算记为加法，单位元为0，则ma=0的最小正整数为元素a的阶。</p><p>2 单位元的阶为1.</p><p>3 群的阶和元素的阶不同。</p><p><strong>定理4</strong> 有限群中每个元素的阶都有限。无限群中元素的阶可能有限，也可能无限，甚至可能都有限。</p><p><strong>循环群</strong> 设a是群G中的一个元素。由a的所有幂构成的集合{a<sub>i</sub>|i∈Z}，是G的一个子群，该集合记为&lt;&lt;a&gt;，并称为由a生成的一个循环群，a为它的一个生成元。循环群是Abel群。</p><p><strong>定理5</strong> 设群G=&lt;a&gt;，则</p><p>1 当|a|=∞时,由s≠t,可得as≠at,即&lt;a&gt;={…,a<sub>-2</sub>,a<sub>-1</sub>,a<sub>0</sub>=e,a<sub>1</sub>,a<sub>2</sub>,…}</p><p>2 当|a|=n时，&lt;a&gt;是n阶群，且&lt;a&gt;={e,a<sub>1</sub>,a<sub>2</sub>,…,a<sub>n-1</sub>}</p><p><strong>推论</strong> 若|G|=n，则G是循环群 ⇔ G有n阶元素。</p><p><strong>定理6</strong> 设群G中元素的阶是n，则a<sub>m</sub>=e ⇔ n|m.</p><p><strong>定理7</strong> 若群中元素a的阶是n，则|a<sub>k</sub>|=n/(k,n)（k为任意整数）。</p><p><strong>定理8</strong> 无限循环群&lt;a&gt;有两个生成元，即a与a<sup>-1</sup>；n阶循环群有φ(n)个生成元，且a<sub>k</sub>是G的生成元当且仅当(k,n)=1。</p><p><strong>定理9</strong> 循环群的子群仍然是循环群。</p><p>如：加群Z的每个子群H都是循环群，且有H=&lt;0&gt;或者H=&lt;m&gt;=mZ,其中m是H中的最小正整数。若H≠&lt;0&gt;，则H是无限的。</p><p><strong>定理10</strong> 无限循环群有无数个子群；而&lt;a&gt;为n阶循环群时，对n的每个正因数k，&lt;a&gt;有且只有一个k阶子群，即&lt;a<sup>n/k</sup>&gt;</p><p><strong>推论</strong> n阶循环群有且仅有T(n)个子群，其中，</p><p>n=p<sub>1</sub>k<sub>1</sub>p<sub>2</sub>k<sub>2</sub>…p<sub>m</sub>k<sub>m</sub>,</p><p>T(n)=(k<sub>1</sub>+1)(k<sub>2</sub>+1)…(k<sub>m</sub>+1)</p><p><strong>双射变换</strong> 含n个元素的任意集合共有n!个双射变换。</p><p>|S<sub>n</sub>|=n!，即n元置换全体组成的集合对置换的复合运算构成一个群，其阶为n!</p><p><strong>定理11</strong> 任意一个置换都可以表示成一些不相交的循环的乘积，且该表达式是唯一的。（不考虑乘积顺序）</p><p><strong>定理12</strong> 任意置换都可分解为若干个对换的乘积。</p><p><strong>陪集的特点：</strong></p><p>1 H的一个陪集一般不是G的子群（实际上只有H本身是）</p><p>2 G的两个不同的元素可能生成H的同一个左陪集。</p><p>3 H的一个左陪集aH一般不等于相应的右陪集Ha。</p><p>4 G关于H的左（右）陪集跟H具有相同大小。</p><p><strong>陪集的重要性质1：</strong></p><p>设H是群G的子群，对任意a，b∈G，下面命题等价：</p><p>1 aH=bH</p><p>2 a∈bH</p><p>3 a<sup>-1</sup>b∈H</p><p><strong>陪集的重要性质2：</strong></p><p>设H是群G的子群，a，b∈G，则</p><p>1 a∈aH</p><p>2 aH=bH或者aH∩bH=∅</p><p>3 G=∪<sub>a∈G</sub> aH</p><p><strong>定理13</strong> 设H是群G的一个子群，令L={aH|a∈G}，R={Ha|a∈G}则在L于R之间存在一一映射，左右陪集的个数或都无限或者都有限且个数相等。</p><p><strong>推论</strong> 由G的左陪集分解</p><p>G=aH∪bH∪cH∪…</p><p>可立即得到G的一个相应右陪集分解</p><p>G=Ha<sup>-1</sup>∪Hb<sup>-1</sup>∪Hc<sup>-1</sup>∪…</p><p><strong>定理14</strong> 设H是群G的子群，则|G|=|H|[G:H]</p><p><strong>推论1(Lagrange定理)</strong> 设H是有限群G的子群，则子群H的阶是群G的阶的因子。</p><p><strong>推论2</strong> 有限群中每个元素的阶都整除群的阶。</p><p><strong>推论3</strong> 设H是有限群G的子群，则|H| | |G|。</p><p><strong>推论4</strong> 设G是N阶有限群，则对G中任意元素g，有g<sup>N</sup>=e。</p><p><strong>定理15(二级结论，证明见PPT7-13)</strong> 素数群都是循环群，且以每一个非单位元的元素作为它的生成元.</p><p><strong>正规子群特例：</strong></p><p>交换群G的任意子群H都是正规子群。</p><p>群G的两个平凡子群G和{e}都是正规子群。</p><p>群G的不等于G的正规子群称为G的真正规子群。</p><p><strong>正规子群的性质：</strong></p><p>设H是G的子群，则下列几个命题相互等价：</p><p>1 ∀a∈G，有aH=Ha（即H ⊴ G）</p><p>2 ∀a∈G，有aHa<sup>-1</sup>=H</p><p>3 ∀a∈G，有aHa<sup>-1</sup>⊆H</p><p><strong>定理16(二级结论，证明见PPT7-22)</strong> 设[G:H]=2，则H为正规子群。</p><p><strong>商群的例子</strong></p><p>在&lt;Z,+&gt;中，mZ=<m>是正规子群，Z/mZ=Z/<m>={[0],[1],…,[m-1]},即整数模m的剩余类群。</p><p><strong>商群推论1</strong></p><p>设H ⊴ G，则</p><p>1 商群G/H的单位元是eH(=H)</p><p>2 aH在G/H中的逆元是a<sup>-1</sup>H</p><p><strong>商群推论2</strong> 有限群G的商群G/H的阶是G的阶的因子。</p><p><strong>定理17</strong> 设G为n阶有限交换群。则对n的任何素因子p，则G中必有p阶元。</p><p><strong>群同构的性质：</strong></p><p>设f是G到G’的同构映射，e与e’分别是G与G’的单位元，a是G中任一元素，则：</p><p>1 f(e)=e’</p><p>2 f(a<sup>-1</sup>)=(f(a))-1</p><p>3 f是可逆映射，且f的逆映射f-1是群G’到G的同构映射</p><p><strong>定理18</strong> 群的同构是等价关系，即</p><p>1 G≌G（自反性）</p><p>2 若G≌G’，则G’≌G（对称性）</p><p>3 若G≌G’，G’≌G’’，则G≌G’’（传递性）</p><p><strong>同态核</strong> 设f是群G到群G’的同态映射，则</p><p>1 Ker(f)是G的正规子群</p><p>2 f是单射⇔Ker(f)={e}</p><p><strong>群同态基本定理</strong></p><p>设f是群G到群G’的满同态映射，则G/Ker(f)≌G’</p><p><strong>自然同态定理</strong> G为一个群，H ⊴ G,则G与它的商群G/H同态。自然同态的核就是正规子群H。</p><p>如&lt;Z,+&gt;与商群Z/nZ是自然同态，核是nZ。</p><p><strong>定理19(证明 书P81)</strong> 每个无限循环群同构于加群Z，每个阶为m的有限循环群同构于加群Z/mZ。</p><p><strong>Cayley定理</strong> 任一群都与某一置换群同构。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;群论定义&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#群论定义&quot;&gt;¶&lt;/a&gt;群论定义&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;映射&lt;/strong&gt; 设A，B 是两个非空的集合，A到B 的一个映射指的是一个对应法则：对集合A中的每一个元素 x，有集合</summary>
      
    
    
    
    <category term="课程学习" scheme="https://blog.guipink.fun/categories/courseStudy/"/>
    
    
  </entry>
  
  <entry>
    <title>startup</title>
    <link href="https://blog.guipink.fun/2022/01/18/startup/"/>
    <id>https://blog.guipink.fun/2022/01/18/startup/</id>
    <published>2022-01-18T05:07:16.000Z</published>
    <updated>2022-01-18T13:20:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1>test</h1><p>创建好我们的家了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;test&lt;/h1&gt;
&lt;p&gt;创建好我们的家了！&lt;/p&gt;
</summary>
      
    
    
    
    <category term="课外学习" scheme="https://blog.guipink.fun/categories/study/"/>
    
    
  </entry>
  
</feed>
